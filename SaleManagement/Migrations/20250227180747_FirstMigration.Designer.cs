// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaleManagement.Context;

#nullable disable

namespace SaleManagement.Migrations
{
    [DbContext(typeof(SaleContext))]
    [Migration("20250227180747_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaleManagement.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Monster"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Asus"
                        });
                });

            modelBuilder.Entity("SaleManagement.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Firstname = "Ömer",
                            Lastname = "Tomakin"
                        },
                        new
                        {
                            Id = 2,
                            Firstname = "Ahmet",
                            Lastname = "Yılmaz"
                        },
                        new
                        {
                            Id = 3,
                            Firstname = "Mehmet",
                            Lastname = "Kaya"
                        },
                        new
                        {
                            Id = 4,
                            Firstname = "Ayşe",
                            Lastname = "Demir"
                        },
                        new
                        {
                            Id = 5,
                            Firstname = "Fatma",
                            Lastname = "Çelik"
                        },
                        new
                        {
                            Id = 6,
                            Firstname = "Ali",
                            Lastname = "Şahin"
                        },
                        new
                        {
                            Id = 7,
                            Firstname = "Zeynep",
                            Lastname = "Koç"
                        },
                        new
                        {
                            Id = 8,
                            Firstname = "Hasan",
                            Lastname = "Öztürk"
                        },
                        new
                        {
                            Id = 9,
                            Firstname = "Elif",
                            Lastname = "Arslan"
                        },
                        new
                        {
                            Id = 10,
                            Firstname = "Burak",
                            Lastname = "Güneş"
                        },
                        new
                        {
                            Id = 11,
                            Firstname = "Merve",
                            Lastname = "Aydın"
                        },
                        new
                        {
                            Id = 12,
                            Firstname = "Emre",
                            Lastname = "Taş"
                        },
                        new
                        {
                            Id = 13,
                            Firstname = "Hüseyin",
                            Lastname = "Erdem"
                        },
                        new
                        {
                            Id = 14,
                            Firstname = "Büşra",
                            Lastname = "Yıldırım"
                        },
                        new
                        {
                            Id = 15,
                            Firstname = "Cem",
                            Lastname = "Karaca"
                        });
                });

            modelBuilder.Entity("SaleManagement.Models.CustomerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Çekmeköy/İstanbul",
                            Age = 20,
                            CustomerId = 1,
                            Job = "JR. Backend Developer"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kadıköy/İstanbul",
                            Age = 25,
                            CustomerId = 2,
                            Job = "Frontend Developer"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Beşiktaş/İstanbul",
                            Age = 30,
                            CustomerId = 3,
                            Job = "Full Stack Developer"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Bakırköy/İstanbul",
                            Age = 27,
                            CustomerId = 4,
                            Job = "UI/UX Designer"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Bornova/İzmir",
                            Age = 35,
                            CustomerId = 5,
                            Job = "Data Scientist"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Keçiören/Ankara",
                            Age = 22,
                            CustomerId = 6,
                            Job = "Software Engineer"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Konak/İzmir",
                            Age = 28,
                            CustomerId = 7,
                            Job = "DevOps Engineer"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Esenyurt/İstanbul",
                            Age = 33,
                            CustomerId = 8,
                            Job = "Cloud Engineer"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Nilüfer/Bursa",
                            Age = 24,
                            CustomerId = 9,
                            Job = "Mobile Developer"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Meram/Konya",
                            Age = 26,
                            CustomerId = 10,
                            Job = "Game Developer"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Seyhan/Adana",
                            Age = 29,
                            CustomerId = 11,
                            Job = "Cyber Security Expert"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Şişli/İstanbul",
                            Age = 31,
                            CustomerId = 12,
                            Job = "AI Engineer"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Tepebaşı/Eskişehir",
                            Age = 23,
                            CustomerId = 13,
                            Job = "Embedded Systems Engineer"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Ortahisar/Trabzon",
                            Age = 27,
                            CustomerId = 14,
                            Job = "Database Administrator"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Odunpazarı/Eskişehir",
                            Age = 34,
                            CustomerId = 15,
                            Job = "Business Analyst"
                        });
                });

            modelBuilder.Entity("SaleManagement.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CustomerId = 1,
                            Description = "Taşınabilir bilgisayar",
                            Name = "Dizüstü Bilgisayar",
                            Price = 100,
                            Stock = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CustomerId = 2,
                            Description = "Son model akıllı telefon",
                            Name = "Akıllı Telefon",
                            Price = 200,
                            Stock = 5
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CustomerId = 3,
                            Description = "Bluetooth destekli kulaklık",
                            Name = "Kablosuz Kulaklık",
                            Price = 50,
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            CustomerId = 4,
                            Description = "Sağlık takibi yapabilen saat",
                            Name = "Akıllı Saat",
                            Price = 120,
                            Stock = 3
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            CustomerId = 5,
                            Description = "RGB ışıklı mekanik klavye",
                            Name = "Mekanik Klavye",
                            Price = 80,
                            Stock = 7
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 5,
                            CustomerId = 6,
                            Description = "Hassasiyet ayarlı oyun mouse",
                            Name = "Oyun Mouse",
                            Price = 40,
                            Stock = 4
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 4,
                            CustomerId = 7,
                            Description = "144Hz oyuncu monitörü",
                            Name = "Monitör",
                            Price = 300,
                            Stock = 2
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 2,
                            CustomerId = 8,
                            Description = "Çok amaçlı tablet",
                            Name = "Tablet",
                            Price = 180,
                            Stock = 6
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 3,
                            CustomerId = 9,
                            Description = "1TB taşınabilir disk",
                            Name = "Harici Disk",
                            Price = 90,
                            Stock = 8
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 3,
                            CustomerId = 10,
                            Description = "Kablosuz taşınabilir hoparlör",
                            Name = "Hoparlör",
                            Price = 70,
                            Stock = 5
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 6,
                            CustomerId = 11,
                            Description = "64GB USB bellek",
                            Name = "USB Bellek",
                            Price = 20,
                            Stock = 15
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 6,
                            CustomerId = 12,
                            Description = "Oyun için güçlü bilgisayar",
                            Name = "Masaüstü Bilgisayar",
                            Price = 500,
                            Stock = 1
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 6,
                            CustomerId = 13,
                            Description = "Yüksek hızlı WiFi yönlendirici",
                            Name = "Router",
                            Price = 60,
                            Stock = 9
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 5,
                            CustomerId = 14,
                            Description = "Full HD web kamera",
                            Name = "Web Kamera",
                            Price = 45,
                            Stock = 3
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 3,
                            CustomerId = 15,
                            Description = "Sanal gerçeklik gözlüğü",
                            Name = "VR Gözlük",
                            Price = 250,
                            Stock = 2
                        });
                });

            modelBuilder.Entity("SaleManagement.Models.CustomerDetail", b =>
                {
                    b.HasOne("SaleManagement.Models.Customer", "Customer")
                        .WithOne("CustomerDetail")
                        .HasForeignKey("SaleManagement.Models.CustomerDetail", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaleManagement.Models.Product", b =>
                {
                    b.HasOne("SaleManagement.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagement.Models.Customer", "Customer")
                        .WithMany("Products")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaleManagement.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SaleManagement.Models.Customer", b =>
                {
                    b.Navigation("CustomerDetail")
                        .IsRequired();

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
